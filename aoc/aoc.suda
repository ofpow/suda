# return string, beginning at start, not including end
fn substr(string, start, end)
    let result = ""

    while (start < end)
        result = (result + string@start)
        start = (start + 1)
    ;

    return result
;

# return 1 if the passed char is 0-9
fn is_num(c)
    if ((c == "1") || (c == "2") || (c == "3") || (c == "4") || (c == "5") || (c == "6") || (c == "7") || (c == "8") || (c == "9") || (c == "0"))
        return 1
    ;
    return 0
;

# returns array of substrings from string, split by delimiter
fn split_by(string, delimiter)
    let rtrn = []

    let start = 1

    let i = 1
    while (i <= len(string))
        if ((string@i) == delimiter)
            append rtrn substr(string, start, i)
            start = (i + 1)
        ;
        i = (i + 1)
    ;

    append rtrn substr(string, start, (len(string) + 2))

    return rtrn
;

# removes all space characters from left side of string
fn trim_left(string)
    let i = 1
    while ((string@i) == " ")
        i = (i + 1)
    ;
    return substr(string, i, (len(string) + 1))
;

# if element is in array, return 1
fn in(array, element)
    let i = 1
    while (i <= len(array))
        if ((array@i) == element)
            return 1
        ;
        i = (i + 1)
    ;
    return 0
;

# cast all elements of array to number
fn to_num(array)
    let i = 1
    while (i <= len(array))
        array@i = num(array@i)
        i = (i + 1)
    ;
    return array
;
